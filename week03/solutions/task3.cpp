#include<iostream>
#include<cmath>
using namespace std;
//дефинираме си функция, която преброява броя 
//на цифрите на дадено число
//функцията ще ползваме по-надолу
int countDigits(unsigned int number){
    int counter=0; // дефинираме един брояч 
				   // в който ще се "трупат"
				   // броят на цифрите
    //цикъл, който на всяка стъпка увеличава
	//брояча и дели числото целочислено на 10
	//пример: ако числото е 1234
	//при първото изпълнение броячът ще стане 1
	//а числото 1234/10, т.е 123
	//на втора стъпка броячът става 2
	//а числото 123/10=12
	//трета стъпка броячът става 3
	//числото 12/10=1
	//четвърта стъпка броячът става 4
	//числото 1/10=0
	//повече стъпки няма, защото условието на цикъла
	//вече не е изпълнено
	while(number>0){
        counter++;
        number/=10;
    }
    return counter;
}
//функция, която казва дали едно число е автоморфно
bool isAutomorphic(int number){
    int square=number*number;//дефинираме променлива,която е квадрата на даденото число
    int powOfTen=ceil(pow(10,countDigits(number)));//тази променлива ни трябва,защото
												   //ако искаме да видим последните n цифрите
												   //на дадено число, трябва да му намерим остатъка
												   //при деление на 10 на степен броя на цифрите, т.е n
												   //пример: ако искаме последните 2 цифри на числото 1234
												   // ше гледаме остатъка му при деление на 10 на степен 2
												   //т.е на 100 и 1234%100=34
												   //аналогично, ако искаме последните 3 цифри, гледаме остатъка
												   //при деление на 10^3=1000 и 1234%1000=234
												   //това са чисто математически знания, които не са критерий за
												   //знанията ви по програмиране
												   //тук използваме и вече дефинираната от нас функция countDigits
												   //и вградената функция ceil, която закръгля едно реално число към най-малкото
												   //цяло, което е по-голямо от даденото реално
												   //пример ceil(99.9)=100,ceil(54.3)=55
												   //това се налага, защото функцията pow връща double 
												   //и са възможни отклонения в сметката
    int remainder=square%powOfTen;
    return number==remainder;
}
//функция, която печата първите n автоморфни числа
void printAutomorphicNumbers(unsigned int n){
    int counter=0; // един брояч, който ще показва колко са изпечатани досега
    int number=1;//започваме да проверяваме от числото 1 и на всяка стъпка ще го увеличаваме
    while(counter<n){ //цикълът се изпълнява, докато броячът стане равен на числото n
        if(isAutomorphic(number)){ // проверяваме дали числото е автоморфно
								   // и ако е го печатаме, увеличаваме брояча
								   //и продължаваме към следващото число (number++)
            cout<<number<<endl;
            counter++;
            number++;
        }
        else{ 
            number++; //ако не е, просто преминаваме към следващото число
        }
    }
}
int main(){
    printAutomorphicNumbers(8);//извикваме функцията printAutomorphicNumbers с аргумент 8
							   //т.е ще очакваме, че тя ще изпечата първите 8 
							   //автоморфни числа
    return 0;

}
